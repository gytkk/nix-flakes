#!/usr/bin/env bash

# Terraform layout 함수
layout_terraform() {
  # Terraform 설정 파일들 변경 감지
  watch_file backend.tf
  watch_file versions.tf
  watch_file main.tf
  
  # .direnv 디렉토리 생성
  mkdir -p .direnv
  
  # .direnv/flake.nix가 없으면 자동 생성
  if [[ ! -f ".direnv/flake.nix" ]]; then
    log_status "Creating .direnv/flake.nix..."
    
    # Terraform 버전을 미리 파싱
    TERRAFORM_VERSION="1.12.2"  # 기본값
    
    # backend.tf, versions.tf, main.tf에서 required_version 찾기
    for file in "backend.tf" "versions.tf" "main.tf"; do
      if [[ -f "$file" ]]; then
        VERSION_SPEC=$(grep -o 'required_version[ ]*=[ ]*"[^"]*"' "$file" | sed 's/.*"\([^"]*\)".*/\1/' | head -1)
        if [[ -n "$VERSION_SPEC" ]]; then
          log_status "Found version spec in $file: $VERSION_SPEC"
          
          # ~> 1.10 -> 1.10.5, ~> 1.10.5 -> 1.10.5, >= 1.10 -> 1.10 등 처리
          if [[ "$VERSION_SPEC" =~ ~\>[[:space:]]*1\.10([\.0-9]*) ]]; then
            TERRAFORM_VERSION="1.10.5"
          elif [[ "$VERSION_SPEC" =~ ~\>[[:space:]]*1\.11([\.0-9]*) ]]; then
            TERRAFORM_VERSION="1.11.5"  
          elif [[ "$VERSION_SPEC" =~ ~\>[[:space:]]*1\.12([\.0-9]*) ]]; then
            TERRAFORM_VERSION="1.12.2"
          elif [[ "$VERSION_SPEC" =~ =[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            TERRAFORM_VERSION="${BASH_REMATCH[1]}"
          elif [[ "$VERSION_SPEC" =~ \>=[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            TERRAFORM_VERSION="${BASH_REMATCH[1]}"
          fi
          break
        fi
      fi
    done
    
    log_status "Using Terraform version: $TERRAFORM_VERSION"
    
    cat > .direnv/flake.nix << FLAKE_EOF
{
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixpkgs-unstable";
    nixpkgs-terraform.url = "github:stackbuilders/nixpkgs-terraform";
  };

  outputs = { self, nixpkgs, nixpkgs-terraform }:
    let
      systems = [ "x86_64-linux" "aarch64-darwin" "aarch64-linux" "x86_64-darwin" ];
      forAllSystems = nixpkgs.lib.genAttrs systems;
    in
    {
      devShells = forAllSystems (system:
        let
          pkgs = nixpkgs.legacyPackages.\${system};
          terraform = nixpkgs-terraform.packages.\${system}."$TERRAFORM_VERSION";
        in
        {
          default = pkgs.mkShell {
            buildInputs = [ terraform ];
            
            shellHook = ''
              echo "🚀 Terraform $TERRAFORM_VERSION environment loaded from .direnv/flake.nix"
              terraform version
            '';
          };
        });
    };
}
FLAKE_EOF
  fi
  
  # git add가 필요한 경우 자동으로 처리 (임시)
  if ! git ls-files --error-unmatch .direnv >/dev/null 2>&1; then
    log_status "Adding .direnv to git temporarily for nix..."
    git add -f .direnv >/dev/null 2>&1 || true
  fi
  
  # .direnv 디렉토리의 flake 사용
  use flake .direnv
}